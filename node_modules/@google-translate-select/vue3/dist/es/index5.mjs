import { defineComponent as K, ref as l, computed as v, unref as a, onMounted as W, onBeforeUnmount as Q } from "vue";
import { createNamespace as X, useMutationObserver as _, createStyleTag as Y, createGoogleTranslateJsonpCallback as Z, createScriptTag as ee, removeIcon as te, isString as ne, GoogleTranslateFireEvent as ae, getCookie as oe } from "./index8.mjs";
import { GOOGLE_TRANSLATE_STOP_TRANSLATE_CLASSNAME as le, GOOGLE_TRANSLATE_ORIGINAL_DOM_ID as ge, GOOGLE_TRANSLATE_JSSDK_URL as ue, GOOGLE_TRANSLATE_ORIGINAL_SELECT_CLASSNAME as b, GOOGLE_TRANSLATE_COOKIE_NAME as se } from "./index7.mjs";
import "./index9.mjs";
import { googleTranslateProps as re } from "./index3.mjs";
const f = X("select"), me = K({
  name: f.n,
  inheritAttrs: !1,
  props: re,
  emits: ["select"],
  setup(o, { emit: N, attrs: k }) {
    const s = l(null), r = l(!1), i = l(""), w = l(""), c = l(-1), C = l(""), L = l(null), u = l({}), d = l(
      {}
    ), I = v(() => [f.b(), le, k.class]), y = v(
      () => o.languages && o.languages.length
    ), R = v(() => E());
    function E() {
      const e = o.languages.find(
        (t) => t.code === a(i)
      );
      return e || o.languages.find(
        (n) => n.code === o.defaultLanguageCode
      );
    }
    function B() {
      return Y(
        "body { top: 0 !important; } .skiptranslate { display: none !important; }"
      );
    }
    function D() {
      const e = o.defaultPageLanguageCode, { jsonpCallbackName: t } = Z(
        {
          pageLanguage: e
        },
        J
      );
      C.value = t;
    }
    function p() {
      return ee(
        `${ue}?cb=${a(C)}`
      );
    }
    function M() {
      B(), D(), L.value = p();
    }
    function H() {
      u.value = _(
        document.querySelector(b),
        (e) => {
          e.forEach((t) => {
            t.addedNodes[0] && t.addedNodes[0].value && i.value === t.addedNodes[0].value && h(
              t.addedNodes[0].value
            );
          });
        },
        {
          childList: !0,
          subtree: !0
        }
      ), a(u).start();
    }
    function V() {
      d.value = _(
        document.querySelector("html"),
        (e) => {
          e.forEach((t) => {
            if (t.attributeName === "lang") {
              const n = t.target.getAttribute(
                "lang"
              ), g = t.oldValue;
              g !== n && g && g !== "auto" && n === "auto" && m(a(i));
            }
          }), te();
        },
        {
          attributes: !0,
          attributeOldValue: !0
        }
      ), a(d).start();
    }
    function h(e) {
      if (!e)
        return;
      const t = ne(e) ? e : e.value ?? "", n = document.querySelector(
        b
      ), g = document.querySelector(`.${f.b()}`);
      !g || !n || g.innerHTML.length === 0 || n.options.length === 0 ? H() : (n.value = t, ae(n, "change"), a(u) && a(u).stop());
    }
    function q(e) {
      return o.languages.find((n) => n.code === e) ? e : "en";
    }
    function x() {
      const e = window.navigator.language || document.documentElement.lang || "en";
      return ["zh-CN", "zh-TW"].every((n) => n !== e) && e.indexOf("-") > -1 ? e.split("-")[0] : e;
    }
    function F() {
      const e = oe(se);
      if (e) {
        const t = e.split("/");
        return t[2] ? t[2] : "en";
      } else
        return "";
    }
    function J() {
      const e = o.fetchBrowserLanguage, t = e ? q(x()) : "", n = F(), g = !!n, T = () => o.defaultLanguageCode ? o.defaultLanguageCode : "en", $ = () => o.languages.find(
        (O) => O.code === t
      ) ? t : T(), j = () => o.languages.find(
        (O) => O.code === n
      ) ? n : T();
      let S = T();
      g ? S = j() : e && (S = $()), m(S);
    }
    function m(e) {
      h(e), i.value = e, N("select", E());
    }
    function A() {
      clearTimeout(a(c)), c.value = -1;
    }
    function P(e) {
      o.trigger === "hover" && (A(), c.value = window.setTimeout(() => {
        var n;
        const t = e.target;
        a(s) && ((n = a(s)) != null && n.contains(t)) && (r.value = !0);
      }, 0));
    }
    function U() {
      o.trigger === "hover" && (A(), c.value = window.setTimeout(() => {
        r.value = !1;
      }, o.animateTimeout));
    }
    function G(e) {
      var n;
      const t = e.target;
      a(s) && ((n = a(s)) != null && n.contains(t)) ? r.value = !0 : r.value = !1;
    }
    return W(() => {
      M(), V(), o.trigger === "click" && document.addEventListener("click", G);
    }), Q(() => {
      var e, t, n;
      (e = a(u)) != null && e.stop && a(u).stop(), (t = a(d)) != null && t.stop && a(d).stop(), (n = a(L)) != null && n.unload && a(L).unload(), o.trigger === "click" && document.removeEventListener("click", G);
    }), {
      ns: f,
      googleTranslateSelectEl: s,
      visible: r,
      selectedLanguageCode: i,
      hoveredLanguageCode: w,
      getClass: I,
      hasLanguages: y,
      selectedLanguageOption: R,
      handleTranslate: m,
      handleDropdownShowByHover: P,
      handleDropdownHideByHover: U,
      GOOGLE_TRANSLATE_ORIGINAL_DOM_ID: ge
    };
  }
});
export {
  me as default
};
//# sourceMappingURL=index5.mjs.map
