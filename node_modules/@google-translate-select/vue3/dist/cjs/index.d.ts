export declare const GoogleTranslateSelect: import("./utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly languages: {
        readonly type: import("vue").PropType<import("@google-translate-select/constants").Language[]>;
        readonly default: () => import("@google-translate-select/constants").Language[];
    };
    readonly defaultLanguageCode: {
        readonly type: StringConstructor;
        readonly default: "en";
    };
    readonly defaultPageLanguageCode: {
        readonly type: StringConstructor;
        readonly default: "en";
    };
    readonly fetchBrowserLanguage: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly animateTimeout: {
        readonly type: NumberConstructor;
        readonly default: 150;
    };
    readonly dropdownClassName: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly dropdownStyle: {
        readonly type: import("vue").PropType<import("vue").CSSProperties>;
        readonly default: () => {};
    };
    readonly showArrow: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly trigger: {
        readonly type: import("vue").PropType<"click" | "hover">;
        readonly default: "hover";
    };
}, {
    ns: {
        namespace: string;
        n: string;
        b: (blockSuffix?: string | undefined) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    googleTranslateSelectEl: import("vue").Ref<HTMLElement | null>;
    visible: import("vue").Ref<boolean>;
    selectedLanguageCode: import("vue").Ref<string>;
    hoveredLanguageCode: import("vue").Ref<string>;
    getClass: import("vue").ComputedRef<unknown[]>;
    hasLanguages: import("vue").ComputedRef<number>;
    selectedLanguageOption: import("vue").ComputedRef<import("@google-translate-select/constants").Language>;
    handleTranslate: (code: string) => void;
    handleDropdownShowByHover: (e: Event) => void;
    handleDropdownHideByHover: () => void;
    GOOGLE_TRANSLATE_ORIGINAL_DOM_ID: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "select"[], "select", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly languages: {
        readonly type: import("vue").PropType<import("@google-translate-select/constants").Language[]>;
        readonly default: () => import("@google-translate-select/constants").Language[];
    };
    readonly defaultLanguageCode: {
        readonly type: StringConstructor;
        readonly default: "en";
    };
    readonly defaultPageLanguageCode: {
        readonly type: StringConstructor;
        readonly default: "en";
    };
    readonly fetchBrowserLanguage: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly animateTimeout: {
        readonly type: NumberConstructor;
        readonly default: 150;
    };
    readonly dropdownClassName: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly dropdownStyle: {
        readonly type: import("vue").PropType<import("vue").CSSProperties>;
        readonly default: () => {};
    };
    readonly showArrow: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly trigger: {
        readonly type: import("vue").PropType<"click" | "hover">;
        readonly default: "hover";
    };
}>> & {
    onSelect?: ((...args: any[]) => any) | undefined;
}, {
    readonly languages: import("@google-translate-select/constants").Language[];
    readonly defaultLanguageCode: string;
    readonly defaultPageLanguageCode: string;
    readonly fetchBrowserLanguage: boolean;
    readonly animateTimeout: number;
    readonly dropdownClassName: string;
    readonly dropdownStyle: import("vue").CSSProperties;
    readonly showArrow: boolean;
    readonly trigger: "click" | "hover";
}>> & Record<string, any>;
export default GoogleTranslateSelect;
export * from './types/props';
